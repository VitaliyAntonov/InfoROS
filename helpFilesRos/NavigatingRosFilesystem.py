

class NavigatingRosFilesystem:
    """ Навигация по файловой системе ROS """

    def rosTutorialsPackageInstall(self):
        """ проверим пакет в ros-tutorials, установите его, используя:

        $ sudo apt-get install ros-<distro>-ros-tutorials

        Замените <distro> (включая <>) на имя вашего дистрибутива ROS 
        (например, indigo, kinetic, lunar ...)"""

    def overviewRosFileSystem(self):
        """ Краткий обзор концепций файловой системы

        Пакеты: Пакеты — это организационная единица программного обеспечения кода ROS. 
        Каждый пакет может содержать библиотеки, исполняемые файлы, сценарии или другие артефакты.

        Манифесты ( package.xml ): манифест — это описание пакета . 
        Он служит для определения зависимостей между пакетами и сбора метаинформации о пакете , 
        такой как версия, сопровождающий, лицензия и т. д. """

    def instrumentsRosFilesystem(self):
        """ _3 Код разбросан по многим пакетам ROS. Навигация с помощью инструментов командной строки, 
        таких как ls и cd , может быть очень утомительной, 
        поэтому ROS предоставляет инструменты, которые помогут вам. """

    def usingRospack(self):
        """ 3.1  rospack позволяет получить информацию о пакетах. 
        В этом руководстве мы рассмотрим параметр поиска, который возвращает путь к пакету. 
        Используйте:

        $ rospack find [package_name]

        Например:

        $ rospack find roscpp
        >>> YOUR_INSTALL_PATH/share/roscpp
        Если вы установили ROS Kinetic из apt на Ubuntu Linux, вы точно увидите:
        >>> /opt/ros/kinetic/share/roscpp
        """

    def usingRoscd(self):
        """ roscd является частью пакета rosbash . Это позволяет вам изменить 
        каталог ( cd ) непосредственно на пакет или стек. Применение: 
        
        $ roscd <package-or-stack>[/subdir]

        Чтобы убедиться, что мы перешли в каталог пакета roscpp, запустите этот пример:

        $ roscd roscpp

        распечатаем рабочий каталог с помощью команды Unix pwd :

        $ pwd

        >>> YOUR_INSTALL_PATH/share/roscpp
        """

    def viewROS_PACKAGE_PATH(self):
        """ Обратите внимание, что roscd , как и другие инструменты ROS, 
        найдет только те пакеты ROS, которые находятся в каталогах, 
        перечисленных в вашем ROS_PACKAGE_PATH . 
        Чтобы увидеть, что находится в вашем ROS_PACKAGE_PATH , введите: 
        
        $ echo $ROS_PACKAGE_PATH

        Ваш ROS_PACKAGE_PATH должен содержать список каталогов, 
        в которых у вас есть пакеты ROS, разделенные двоеточием. 
        Типичный ROS_PACKAGE_PATH может выглядеть так:

        >>>  /opt/ros/kinetic/base/install/share

        Как и в случае с другими путями среды, вы можете добавить дополнительные каталоги 
        в свой ROS_PACKAGE_PATH, при этом каждый путь отделяется двоеточием ':'.
        """

    def roscdSubdirectories(self):
        """ 3.2.1 roscd также может перемещаться в подкаталог пакета или стека. Команды: 
        
        $ roscd roscpp/cmake

        $ pwd
        >>> YOUR_INSTALL_PATH/share/roscpp/cmake
        """

    def roscdLog(self):
        """ 3.3 roscd log приведет вас к папке, в которой ROS хранит файлы журналов. 
        Обратите внимание: если вы еще не запускали какие-либо программы ROS, 
        это приведет к ошибке, говорящей о том, что они еще не существуют.
        Если вы уже запускали какую-либо программу ROS, попробуйте:

        $ roscd log
        """

    def usingRosls(self):
        """ 3.4 rosls является частью пакета rosbash . Это позволяет 
        выполнять ls непосредственно в пакете по имени, а не по абсолютному пути.
        Применение: 
        
        $ rosls <package-or-stack>[/subdir]

        Пример:

        $ rosls roscpp_tutorials
        >>> cmake launch package.xml  srv
        """

    def rosTab(self):
        """ 3.5  Завершение табуляции

        Вводить полное имя пакета может быть утомительно. 
        В предыдущем примере roscpp_tutorials — довольно длинное имя.
        К счастью, некоторые инструменты ROS поддерживают завершение TAB.
        Начните с ввода:

        $ roscd roscpp_tut <<< теперь нажмите клавишу TAB >>> """




